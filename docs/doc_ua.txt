Бібліотека для створення віртуальних процесів.

Дана бібліотека призначена для реалізації складної асинхронної бізнес логіки та уніфікації виконання цієї логіки.

Загальна інформація.
Бібліотека містить декілька основних класів, за допомогою яких реалізується користувацька бізнес-логіка.

Клас Workflow - основний абстрактний клас бібліотеки, наслідуванням якого можна створити опис власного процесу. Параметри
процесу задаються в конструкторі дочірнього класу.

Клас Event - абстрактний клас для реалізації подій, за допомогою яких Workflow взаємодіє з зовнішнім середовищем.

Клас Postgres - містить логіку роботи з базою данних.

Клас Logger - містить функціонал логування.

Швидкий старт

1) Для початку роботи з бібліотекою необхідно створити клас, який буде наслідуватися від класу Workflow. В конструкторі
класа необхідно задати параметри процесу. Приклад:

class ExampleWorkflow extends Workflow {
    public function __construct() {
        $process_nodes = [
            ["action1"],
            ["wait_1s", "timeout" => 1],
            ["goto_action1", "counter" => 10],
            ["end"]
        ];
        parent::__construct($process_nodes);
    }

    public function action1(): void {
        $cnt = $this->get_context('cnt') ?: 0;
        $cnt++;
        $this->logger->info("Count: $cnt");
        $this->set_context('cnt',$cnt);
    }
}

Обов'язковим є опис алгоритму процесу в конструкторі класа. Для цього необхідно створити масив $process_nodes, в якому
елементи масиву - команди, які будуть послідовно виконуватись при запуску методу run().

2) Створити тест для перевірки роботи процесу. Приклад:
    function test_success(): void {
        $wf=new ExampleWorkflow();
        $wf->run();
        self::assertEquals('goto_action1', $wf->get_current_node_name());
    }

3) Запустити тест.

При створенні об'єкту класу бібліотека перевіряє правильність опису і в разі помилки видає виключення з описом помилки.
При виклику методу run() бібліотека виконує описаний алгоритм процесу. В разі наявності команди очікування "wait"
команда run завершується, а об'єкт зберігає у собі поточний стан процесу.

Робота з базою даних
БД не є необхідною в ході розробки, але на робочому оточенні вона потрібна для збереження стану процесу і
використовується механізмом, що забезпечує його виконання. Логіка обробки міститься в пакеті phpworkflow/processor.

Команди опису процесу
В даному розділі описані команди, які використовуються при описі процесу. Команди допускають скорочений синтаксис.
В процесі аналізу алгоритму бібліотека доповнює опис процесу параметрами, які не були вказані, але можна отримати
з її назви.

1) Команда виконання логіки. Приклад:
    ["action1"]
    В даному прикладі викликається метод action1() класу ExampleWorkflow.

У випадку якщо не задано будь який значущий префікс типу "goto_" або "wait_" то викликається метод з назвою,
яка вказана в команді. Бібліотека валідує наявність вказаного метода в класі і генерує виключення в разі його
відсутності.
Ще одною важливою особливістю є те, що дані методи не повинні містити команди очікування типу sleep. Реалізація
очікування буде описана нижче.


2) Команда безумовного переходу. Приклад:
    ["goto_action1"]
    В даному прикладі потік виконання команд переключається на команду "action1".
За допомогою даної команди можна реалізувати безумовний перехід на іншу команду, і тим самим змінювати послідовність
виконання команд. Додатковим параметром команди є "counter" в якому можна задати кількість переходів. Приклад:
    ["goto_action1", "counter" => 10]
    ["action2"]
    В даному прикладі потік виконання команд переключається на команду "action1" 10 раз. При 11-му виклику переходу
    не відбудеться і потік виконання перейде до наступної команди action2.

    Є можливість задати додаткову поведінку по закінченню циклу переходів. Якщо вказано параметр "one_time", всі
    подальші виклики команди будуть проігноровані. Приклад:
    ["goto_action1", "counter" => 10, "one_time"]
    По замовчуванню, якщо параметр "one_time" не вказано, то після закінчення циклу переходів, лічількик переходів
    обнуляється і можливість переходу відновлюється.
    Таким чином дана команда дозволяє реалізовувати цикли типу FOR з визначеною кількістю ітерації.

3) Команда очікування. Приклад:
    ["wait_10s", "timeout" => 10]
    В даному прикладі потік виконання команд зупиняється на 10 секунд.
    Команда очікування працює наступним чином. Об'єкт Workflow містить внутрішню змінну, яка визначає час
    запуску наступної команди. Значення цієї змінної порівнюється з поточним часом. Якщо поточний час більший або
    рівний значенню змінної, то виконується команда згідно алгоритму. Але якщо поточний час менший за значення
    внутрішньої змінної, то виконання команди призупиняється до тих пір, поки поточний час не "наздожене" час
    записаний у внутрішній змінній процесу.
    При цьому можна виконувати метод run() об'єкта Workflow будь яку кількість разів, це не вплине на процес виконання
    та команнд.
    Даний підхід важливо розуміти при написанні тесту. В тесті є можливість пропускати періоди очікування, і тим самим
    довгий асинхронний процес тестувати за лічені секунди. Приклад:
    $workflow->run(); // Виконання дійшло до команди очікування, процес зупинився
    $workflow->set_exec_time(0); // Скидуємо час воркфлова
    $workflow->run(); // Пішло виконання команд які ідуть після команди очікування

    Якщо ж прибрати виклик методу set_exec_time(), то будь яка кількість команд run() не приведе до зміни стану воркфлова.

    Команда дозволяє вказати конкретний час виконання команди, а не період очікування. Приклад:
    ["wait_0730", "time" => "07:30"]
    Внутрішній таймер воркфлова буде переведений на час у майбутньому що відповідає 07:30 за локальним часом.

4) Умовний перехід. Приклад:
                ["if_selected_goods_on_stock",
                    "then" => [
                        ["make_order"],
                    ],
                    "else" => [
                        ["send_request_to_supplier"],
                        ["wait_for_goods", "timeout" => 24 * 3600],
                    ]
                ],
    В даному прикладі "if_selected_goods_on_stock" - це назва методу класу воркфлова який буде виконаний. Метод
    повинен повертати значення яке можна привести до типу boolean. Якщо значення true, то виконується послідовність
    команд "then", якщо значення false, то виконується послідовність команд у блоку "else".
    Кожен з блоків може містити одну чи декілька команд. Атрибут "else" є необов'язковим.

5) Команда закінчення виконання воркфлова. Приклад:
    ["end"]
Дана команда закінчує виконання воркфлова. Дана команда не обов'язкова, за умови відсутності команд, воркфлов також
закінчує свою роботу.
